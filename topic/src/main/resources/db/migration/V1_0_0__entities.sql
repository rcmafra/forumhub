-->Creation tables of domain<--
CREATE TABLE IF NOT EXISTS profile
(
    profile_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    profile    VARCHAR(50) NOT NULL UNIQUE CHECK (profile IN ('ADM', 'MOD', 'BASIC', 'ANONYMOUS')),
    PRIMARY KEY (profile_id)
);

CREATE TABLE IF NOT EXISTS users
(
    user_id                    BIGINT GENERATED BY DEFAULT AS IDENTITY,
    first_name                 VARCHAR(255)        NOT NULL,
    last_name                  VARCHAR(255)        NOT NULL,
    username                   VARCHAR(20) UNIQUE  NOT NULL,
    email                      VARCHAR(255) UNIQUE NOT NULL,
    "password"                 VARCHAR(255)        NOT NULL,
    is_account_non_expired     BOOLEAN DEFAULT TRUE,
    is_account_non_locked      BOOLEAN DEFAULT TRUE,
    is_credentials_non_expired BOOLEAN DEFAULT TRUE,
    is_enabled                 BOOLEAN DEFAULT TRUE,
    profile_id                 BIGINT,
    PRIMARY KEY (user_id),
    CONSTRAINT FK_PROFILE_USERS FOREIGN KEY (profile_id) REFERENCES profile (profile_id)
);

CREATE TABLE IF NOT EXISTS course
(
    course_id BIGINT GENERATED BY DEFAULT AS IDENTITY,
    "name"    VARCHAR(255) NOT NULL UNIQUE,
    category  VARCHAR(50)  NOT NULL CHECK (category IN
                                           ('JAVA', 'C', 'CPLUSPLUS', 'CSHARP', 'GOLANG', 'QA', 'CLOUD_COMPUTATION', 'DEVOPS')),
    PRIMARY KEY (course_id)
);

CREATE TABLE IF NOT EXISTS topic
(
    topic_id   BIGINT GENERATED BY DEFAULT AS IDENTITY,
    title      VARCHAR(200) NOT NULL,
    question   TEXT NOT NULL,
    status     CHAR(10) DEFAULT 'UNSOLVED' CHECK (status IN ('SOLVED', 'UNSOLVED')),
    created_at TIMESTAMP(6) WITH TIME ZONE,
    user_id    BIGINT,
    course_id  BIGINT,
    PRIMARY KEY (topic_id),
    CONSTRAINT FK_USERS_TOPIC FOREIGN KEY (user_id) REFERENCES users (user_id),
    CONSTRAINT FK_COURSE_TOPIC FOREIGN KEY (course_id) REFERENCES course (course_id)
);

CREATE TABLE IF NOT EXISTS answer
(
    answer_id   BIGINT GENERATED BY DEFAULT AS IDENTITY,
    solution    TEXT NOT NULL,
    best_answer BOOLEAN DEFAULT TRUE,
    created_at  TIMESTAMP(6) WITH TIME ZONE,
    topic_id    BIGINT,
    user_id     BIGINT,
    PRIMARY KEY (answer_id),
    CONSTRAINT FK_USERS_ANSWER FOREIGN KEY (user_id) REFERENCES users (user_id),
    CONSTRAINT FK_TOPIC_ANSWER FOREIGN KEY (topic_id) references topic (topic_id)
);
----------------------------------------------------------//----------------------------------------------------------

-->DML for insert default datas<--
INSERT INTO profile (profile)
SELECT 'ANONYMOUS'
WHERE NOT EXISTS(SELECT 1
                 FROM profile
                 WHERE profile = 'ANONYMOUS');

INSERT INTO profile (profile)
SELECT 'BASIC'
WHERE NOT EXISTS(SELECT 1
                 FROM profile
                 WHERE profile = 'BASIC');

INSERT INTO profile (profile)
SELECT 'MOD'
WHERE NOT EXISTS(SELECT 1
                 FROM profile
                 WHERE profile = 'MOD');

INSERT INTO profile (profile)
SELECT 'ADM'
WHERE NOT EXISTS(SELECT 1
                 FROM profile
                 WHERE profile = 'ADM');


INSERT INTO hub.users
(user_id, first_name, last_name, username, email, "password", is_account_non_expired, is_account_non_locked,
 is_credentials_non_expired, is_enabled, profile_id)
SELECT 1,
       'Anonymous',
       'Anonymous',
       'anonymous',
       'anonymous@email.com',
       '$2a$10$xot6zqrQ3S8JHWEydAHtL.mN3/0YNM5AWjoL2sxnja/3bnnpXTucm',
       false,
       false,
       false,
       false,
       1
WHERE NOT EXISTS (SELECT 1
                  FROM hub.users
                  WHERE user_id = 1
                    AND first_name = 'Anonymous'
                    AND last_name = 'Anonymous'
                    AND username = 'anonymous'
                    AND email = 'anonymous@email.com'
                    AND password = '$2a$10$xot6zqrQ3S8JHWEydAHtL.mN3/0YNM5AWjoL2sxnja/3bnnpXTucm');

INSERT INTO hub.users
(user_id, first_name, last_name, username, email, "password", is_account_non_expired, is_account_non_locked,
 is_credentials_non_expired, is_enabled, profile_id)
SELECT 2,
       'mod',
       'mod',
       'mod',
       'mod@email.com',
       '$2a$10$FqrmHjfPd026BGwbV56JO.OiNVZPIhZL8Y5d7VI3.yTscDjdO62Ze',
       true,
       true,
       true,
       true,
       3
WHERE NOT EXISTS (SELECT 1
                  FROM hub.users
                  WHERE user_id = 2
                    AND first_name = 'mod'
                    AND last_name = 'mod'
                    AND username = 'mod'
                    AND email = 'mod@email.com'
                    AND password = '$2a$10$FqrmHjfPd026BGwbV56JO.OiNVZPIhZL8Y5d7VI3.yTscDjdO62Ze');

INSERT INTO hub.users
(user_id, first_name, last_name, username, email, "password", is_account_non_expired, is_account_non_locked,
 is_credentials_non_expired, is_enabled, profile_id)
SELECT 3,
       'adm',
       'adm',
       'adm',
       'adm@email.com',
       '$2a$10$dKvyjxi6gbqvGWzchu0dDedZsvTzDvhKp6rf5xVBlTg62pwtZwfCO',
       true,
       true,
       true,
       true,
       4
WHERE NOT EXISTS (SELECT 1
                  FROM hub.users
                  WHERE user_id = 3
                    AND first_name = 'adm'
                    AND last_name = 'adm'
                    AND username = 'adm'
                    AND email = 'adm@email.com'
                    AND password = '$2a$10$dKvyjxi6gbqvGWzchu0dDedZsvTzDvhKp6rf5xVBlTg62pwtZwfCO');
----------------------------------------------------------//----------------------------------------------------------

-->Creation function for declare anonymous author<--
CREATE OR REPLACE FUNCTION fn_declareAnonymousAuthor()
    RETURNS TRIGGER AS'
BEGIN
    UPDATE hub.TOPIC SET user_id = 0 WHERE user_id = OLD.user_id;
    UPDATE hub.ANSWER SET user_id = 0 WHERE user_id = OLD.user_id;
    RETURN OLD;
END;'
LANGUAGE plpgsql;


-->Creation trigger for declare anonymous author<--
CREATE OR REPLACE TRIGGER trg_execForDeclareAnonymousAuthor
    BEFORE DELETE
    ON hub.USERS
    FOR EACH ROW
EXECUTE FUNCTION fn_declareAnonymousAuthor();